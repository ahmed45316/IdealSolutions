// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tenets.Identity.Data.Context;

namespace Tenets.Identity.Data.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20190801164500_ChangePassword")]
    partial class ChangePassword
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tenets.Identity.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action")
                        .HasMaxLength(100);

                    b.Property<string>("Controller")
                        .HasMaxLength(100);

                    b.Property<string>("Href")
                        .HasMaxLength(256);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStop");

                    b.Property<int>("ItsOrder");

                    b.Property<DateTime?>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Parameters")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ParentId")
                        .HasMaxLength(256);

                    b.Property<string>("ScreenNameAr")
                        .HasMaxLength(256);

                    b.Property<string>("ScreenNameEn")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c11c91c0-5c2f-45cc-ab6d-1d256538a5ee"),
                            Action = "index",
                            Controller = "Home",
                            Icon = "icon-home",
                            IsDeleted = false,
                            IsStop = false,
                            ItsOrder = 1,
                            LastAccessed = new DateTime(2019, 8, 1, 18, 45, 0, 120, DateTimeKind.Local).AddTicks(9660),
                            ScreenNameAr = "الشاشة الرئيسية",
                            ScreenNameEn = "Main Screen"
                        },
                        new
                        {
                            Id = new Guid("c12c91c0-5c2f-45cc-ab6d-1d256538a5ee"),
                            Icon = "fas fa-address-card",
                            IsDeleted = false,
                            IsStop = false,
                            ItsOrder = 2,
                            LastAccessed = new DateTime(2019, 8, 1, 18, 45, 0, 121, DateTimeKind.Local).AddTicks(2723),
                            ScreenNameAr = "الصلاحيات",
                            ScreenNameEn = "Authentication"
                        },
                        new
                        {
                            Id = new Guid("c13c91c0-5c2f-45cc-ab6d-1d256538a5ee"),
                            Action = "ManageRoles",
                            Controller = "Security",
                            Icon = "icon-user",
                            IsDeleted = false,
                            IsStop = false,
                            ItsOrder = 7,
                            LastAccessed = new DateTime(2019, 8, 1, 18, 45, 0, 121, DateTimeKind.Local).AddTicks(2754),
                            ParentId = new Guid("c12c91c0-5c2f-45cc-ab6d-1d256538a5ee"),
                            ScreenNameAr = "الدور الوظيفي",
                            ScreenNameEn = "Roles"
                        },
                        new
                        {
                            Id = new Guid("c14c91c0-5c2f-45cc-ab6d-1d256538a5ee"),
                            Action = "Users",
                            Controller = "Security",
                            Icon = "icon-user",
                            IsDeleted = false,
                            IsStop = false,
                            ItsOrder = 8,
                            LastAccessed = new DateTime(2019, 8, 1, 18, 45, 0, 121, DateTimeKind.Local).AddTicks(3406),
                            ParentId = new Guid("c12c91c0-5c2f-45cc-ab6d-1d256538a5ee"),
                            ScreenNameAr = "المستخدمين",
                            ScreenNameEn = "Users"
                        });
                });

            modelBuilder.Entity("Tenets.Identity.Entities.MenuRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("MenuId")
                        .HasMaxLength(256);

                    b.Property<Guid>("RoleId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("MenuRoles");
                });

            modelBuilder.Entity("Tenets.Identity.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpiresUtc");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("IssuedUtc");

                    b.Property<DateTime?>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<Guid>("UserId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRefreshTokens");
                });

            modelBuilder.Entity("Tenets.Identity.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c21c91c0-5c2f-45cc-ab6d-1d256538a5ee"),
                            IsDeleted = false,
                            LastAccessed = new DateTime(2019, 8, 1, 18, 45, 0, 119, DateTimeKind.Local).AddTicks(5927),
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("Tenets.Identity.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("ImgPath")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c21c91c0-5c2f-45cc-ab6d-1d256538a4ee"),
                            AccessFailedCount = 0,
                            Email = "admin@A3n.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LastAccessed = new DateTime(2019, 8, 1, 18, 45, 0, 111, DateTimeKind.Local).AddTicks(2360),
                            LockoutEnabled = false,
                            PasswordHash = "ABYHOpE2Do3jXzpcPPzpHWmkdVBorF8/zmfIoCVqxd4N6RICbrfTrmClh/Tf3MDvtw==",
                            PhoneNumber = "+9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98ef26b6-19c6-4d76-9fd6-dacff86bcb89",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Tenets.Identity.Entities.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UserId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Tenets.Identity.Entities.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(256);

                    b.Property<Guid>("UserId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Tenets.Identity.Entities.UsersRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastAccessed")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("RoleId")
                        .HasMaxLength(256);

                    b.Property<Guid>("UserId")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c21c91c0-5c2f-45cc-ab6d-1d256538a6ee"),
                            IsDeleted = false,
                            LastAccessed = new DateTime(2019, 8, 1, 18, 45, 0, 120, DateTimeKind.Local).AddTicks(859),
                            RoleId = new Guid("c21c91c0-5c2f-45cc-ab6d-1d256538a5ee"),
                            UserId = new Guid("c21c91c0-5c2f-45cc-ab6d-1d256538a4ee")
                        });
                });

            modelBuilder.Entity("Tenets.Identity.Entities.Menu", b =>
                {
                    b.HasOne("Tenets.Identity.Entities.Menu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Tenets.Identity.Entities.MenuRole", b =>
                {
                    b.HasOne("Tenets.Identity.Entities.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tenets.Identity.Entities.Role", "Role")
                        .WithMany("Menu")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tenets.Identity.Entities.RefreshToken", b =>
                {
                    b.HasOne("Tenets.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tenets.Identity.Entities.UserClaim", b =>
                {
                    b.HasOne("Tenets.Identity.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tenets.Identity.Entities.UserLogin", b =>
                {
                    b.HasOne("Tenets.Identity.Entities.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tenets.Identity.Entities.UsersRole", b =>
                {
                    b.HasOne("Tenets.Identity.Entities.Role", "Role")
                        .WithMany("UsersRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tenets.Identity.Entities.User", "User")
                        .WithMany("UsersRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
